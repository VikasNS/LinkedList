    //Circular Linked List operation Teacher Like Edition :p
    
    
    
    
    #include<stdio.h>
    #include<stdlib.h>
    #define null 0
    struct node
    {
        int info;
        struct node * next;
    };
    typedef struct node * nodeptr;
    
    nodeptr getNode()
    {
        return (nodeptr)malloc(sizeof(nodeptr));
    }
    
    void freeNode(nodeptr node)
    {
        free(node);
    }
    
    //We would be given a node p's adress and would be asked to insert new node next to it
    void InsertAfterAGivenNode(nodeptr p,int value)
    {
        if(p==null) printf("Circular Linked List is empty");
        else 
        {
            
            
            //We get a new node and assign the value;
            nodeptr newnode=getNode();
            newnode->info=value;
            
            // We hava a node p
            // Before we insert a new node,ie initially p->next contains the address of the next node(Q)
            
            // We have to insert the newnode between these two nodes;
            
            //So we have to link p with newnode and  newnode with Q (its address will be in p->next 
           
            //We do this first ie Link newnode with Q
            //As if we first did linking p with newnode
            //p->next would be assigned to newnode
            //but Q's address which was stored in p->next
            //would be gone which would be needed later to link newnode with Q
            
            //Linking newnode with Q
             newnode->next=p->next;
            
            //Linking p with newnode
            p->next=newnode;
        
            
        }
    }
    
    //We would be given address a nod p
    //Lets imagine the node next to p is q
    //and the node next to q is r
    // .....p->q->r...
    //Here p is linked to q and q is linked to r
    //Our job is to delete the node after p
    //ie the node to be deleted is q
    //So all we have to do is directly link p to r
    // p->r
    // THus we deleted q (The node next to p) as asked in question
    void DeleteANodeAferAGivenNode(nodeptr p)
    {
        //First we check if p or p->next are null(There is no node 
        //right of p)
        //In either case Deletetion is not possible 
        if(p==null || p->next==null) printf("Deletion is not possible");
        else
        {
            //We store node to be deleted q's address which is present
            //in p->next in a q variable as we need it to free memory 
            //later
            nodeptr q=p->next;
            
            //Now we link p to r
            //r's address is present in q-> next
            
            //q->next will give us address of r
            
            
            
            p->next=q->next;
            //it can also be done as p->next=(p->next)->next
            
            
            printf("%d was deleted \n ",q->info);
            //Finally we free q node whose address is stored in temp
            free(q);
            
            
        }
    }
    
    //We would be given *clist and asked to insert
    //a new node at the front
    // Imagine as shown below
    //   a->b->c
    
    // a is the first node
    // c is the last node
    // As this is a circular Linked list
    // The last node has a special property
    // ie: last node (c) has the address of the first node a
    
    // so c->next contains a's adress
    // ie c is linked to a
    // Thus the frontmost's address will be stored 
    // in the last node's next
    
    //Thus if we want to add a new node m to front
     
    // m->a->b->c
    
    // we also need to change c->next to m
    // which was previously pointing to a
    // so as to reatian circular lists property
    // that last node contians first nodes address
    
    //finally we need to link m with a to complete the process
    
    //First we get First node(a)'s address and store it in variable 1st_node as we need it 
    //later to link  m (newnode) to a
    //Then We link c with m by c->next=m(ie newnode)
    //then m->next=1st_node    
    
    
    void insertFront(nodeptr *clist,int value)
    {
        nodeptr node=getNode();
        node->info=value;
        if(*clist==null) *clist=node;
        else
        {
            node->next=(*clist)->next;
        }
       (*clist)->next=node;
        
    }
    
    void deleteFront(nodeptr *clist)
    {   
        if(*clist==null) printf("LL is empty");
        else
        {
             nodeptr toFree=(*clist)->next;
             if((*clist)->next==*clist) toFree=*clist;
             else (*clist)->next=toFree->next;
             free(toFree);
        }
    }
    
    void insertEnd(nodeptr * clist,int value)
    {
        nodeptr node=getNode();
        node->info=value;
        
        
        if(*clist==null)
        {
            
            (node)->next=node;
        
        }
        else 
        {
             node->next=(*clist)->next;
            (*clist)->next=node;
            
        }
        *clist=node;
        
        
    }
    
    void deleteEnd(nodeptr *clist)
    {
        
        if(*clist==null) printf("LL is empty");
        else 
        {
            nodeptr toFree=*clist;
            printf("%d was deleted",(*clist)->info);
            if((*clist)->next==*clist) *clist=null;
            else
            {
                
                nodeptr p=(*clist)->next; //First node
                while(p->next!=(*clist)) p=p->next;
                p->next=(*clist)->next;
                *clist=p;
                
            }
            free(toFree);
            
            
        }
    }
    
    void concat(nodeptr *clist1,nodeptr *clist2)
    {
        
        
        if(*clist2==null) *clist2=*clist1;
        else if(*clist1==null) return (0);
        else
        {
            nodeptr _1st_1st_node=(*clist1)->next;
            (*clist1)->next=(*clist2)->next;
            (*clist2)->next=_1st_1st_node;
            
        }
        
    }
    void display(nodeptr clist)
    {
        
        if(clist==null) printf("Circular Linked List is empty");
        else 
        {
            nodeptr p=clist;
            p=p->next;
            while(p!=clist)
            {
                printf("%d",p->info);
                
                p=p->next;
                if(p!=clist) printf("->");
            }
            printf("->%d \n",p->info);
            
        }
    }
    int main() {
        nodeptr one=null;
        insertFront(&one,10);
        insertFront(&one,20);
        insertFront(&one,30);
        display(one);
        
        
        nodeptr one_=null;
        insertFront(&one_,40);
        insertFront(&one_,50);
        insertFront(&one_,60);
        display(one_);
        
        
        concat(&one,&one_);
        display(one_);
       
        
       
    }
