#include<stdio.h>
#include<stdlib.h>
#define null 0
struct node 
{
  int info;
  struct node * next;
};
typedef struct node * Nodeptr;

Nodeptr getNode()
{
  return (Nodeptr)malloc(sizeof(Nodeptr));
}

void display(Nodeptr clist)
{
  if(clist==null) printf("Empty list");
  else
  {
    
    int last=(clist)->info;
    Nodeptr curr=(clist)->next;
    while(curr!=clist)
    {
      printf("%d->",curr->info);
      curr=curr->next;
    }
    printf("%d",last);
    
    
  }
  
}

void insert_front(Nodeptr *clist,int info)
{
  Nodeptr newnode=getNode();
  newnode->info=info;
  if(clist==null) 
  {
    *clist=newnode;
    
  }
  else
  {
    newnode->next=(*clist)->next;
  }
  (*clist)->next=newnode;
  
  
}

void delete_nth(Nodeptr *clist,int n)
{
  if(*clist==null) printf("List is empty");
  else if((*clist)->next==(*clist)) *clist=null;
  else
  {
      Nodeptr curr=(*clist)->next;
      Nodeptr prev=(*clist);
      int i=1;
      do{
         if(i==n)
         {
             prev->next=curr->next;
             if(curr==*clist)
             {
                 *clist=prev;
             }
         }
         prev=curr;
         curr=curr->next;
         i++;
      }while(curr!=*clist);
  }
}

void insert_nth(Nodeptr *clist,int info,int n)
{
  
  Nodeptr newnode=getNode();
  newnode->info=info;
  if(*clist!=null)
  {
    Nodeptr prev=*clist;
    Nodeptr curr=(*clist)->next;
    int i=1;
    int notdone=1;
    do {
      if(i==n)
      {
        prev->next=newnode;
        newnode->next=curr;
        notdone=0;
        break;
       }
      prev=curr;
      curr=curr->next;
      i++;
    }while(curr!=*clist);
   if(i==n && notdone)
   {
     newnode->next=(*clist)->next;
     (*clist)->next=newnode;
     *clist=newnode;
   }
  }else
  {
    
    *clist=newnode;
    (*clist)->next=*clist;
  }
}

int main(void) {
  Nodeptr n=null;
  
  // 
  // Nodeptr n2=getNode();
  // n2->info=12;
  // n->next=n2;
  // n2->next=null;
  display(n);
  printf("\n");
  
  insert_nth(&n,40,1);
  insert_nth(&n,30,2);
  insert_nth(&n,450,2);
  display(n);
  printf("\n");
  delete_nth(&n,2);
  delete_nth(&n,1);
  delete_nth(&n,3);
  display(n);
  
}
